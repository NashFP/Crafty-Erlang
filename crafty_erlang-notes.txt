Crafty Erlang

    Colin
    Standard spiel about Erlang:
        massively scalable
        ugly language, awkward restrictions
    Challenge that:
        good for small programs; elegant
        Just a different way of doing things
    There is "a way of doing things" - Idioms/design patterns
    Small but useful projects
    get you started having fun w/ Erlang


Synergistic Weirdness

    Weirdness - missing stuff
        "I want to write a 'for' loop that increments a counter"
        Mutable variables
        Loop controls (for, while)
        Objects
    Weirdness - extra stuff
        Pattern matching functions and guard expressions
        Tail recursion
        Inter-Process Communication/Messaging (IPC)

    When will I use that stuff? All the time

    Synergistic Weirdness
        the weird stuff combines to make something elegant
        one example is...


Recursion

    Replaces iteration/for/while controls
    Scary in OO because of side effects
    Immutable variables make it safe; limitation = strength
    Pattern matching makes it powerful
    Standard pattern: beginning, end, middle


Recursion - example

    Simple case: list munging
        beginning
        end
        middle: n -> n+1
    Conclusion: multiple inputs & outputs, end & middle funcs


Digression: Backwards Lists

    Q: What's up with that?
    A: Both immutable and efficiently extensible
    Hint: _singly_ linked lists


Digression: Backwards Lists

    Foo
    Bar
    Baz - only works because lists are immutable


Back to recursion: Bowling Game

    Calculate score for a bowling game.
    Input is a list of rolls
    Output is a number - the final score
    Need to keep track of frame numbers - not fixed number of rolls
    Frame score may depend on other frames


Bowling Game

    beginning
    end
    middle - normal
    middle - strike & spare defs
    middle - strike & spare details
    incomplete games?
        Several revisions later...
    final
    Ok, that's an algorithm
        To make it useful, we need to add
        * interface
        * storage (mutable!)


Sketching the CLI

    io:get_line
    example input
    string:tokens - like split
    string:to_integer
    dict:new
    dict:append
    dict:find
    bowling_game:score
        Normally, you'd start iterating at this point...


Recurse!

    loop with updated GameData
    recursion makes variable scoping clear
    this is the middle part of the recursion


Escript kicks it off

    this is the beginning of the recursion
    no end; ctrl-c out
    we'll call the CLI done, now...

    Run it!


Webify!

    Simple web app
    Same logic, new interface
    Single page sends Ajax requests to REST service
        updates itself with javascript
    Uses the Spooky web framework (Sinatra) & jQuery
    Multiple processes handling web requests, so
        Spin off a service process to manage the data (bowling_store)


REST API

    Yes, I'm modifying state with a GET. Shhh...


Spooky App

    header
        behavior - like "implements"
        import as-yet-unwritten bowling_store
    init
        bowling_store is service
        sounds heavyweight, but isn't
        will make more sense when you see the code
    get
        Spooky splits url path into list
    get (full)
    get (base)
        get base url returns page
    get (static)
        otherwise, relative path to resource


Bowling Store

    command-line loop
        read, process, write, recurse

    message-handling loop
        receive, process, respond, recurse
        same amount of code (maybe less!)
        middle of recursion; no end
        process owns data, not vice-versa

    init: beginning of recursion
        take original loop(Data), wrap in closure, spawn

    append: API
        so client doesn't have to know about IPC


Run it!

    run from erl command line
        Of course, I got tired of typing all that.

    run from Escript
        get environment variable
        add Spooky & dependencies to code path
        compile our code
            remember - code reloading!


REST interaction

    quick test from the browser
        3, 4, 10, 3


Webapp interaction

    base page
    add player - all client side
    3 - pre
        3, 4, 10, 3


Extra credit: Automate REST tests
    Command-line script, hits REST service
        test sequence of requests: 3, 4, 10, 3

    Define test data
        could define inline
        external file, just to show how it's done

    Load test data from file
        io:read parses straight into Erlang data structure (Term)

    Make REST call
        format URL, make request
        pull Content out of nested tuple structure

    Recurse through tests - main
        inets:start sets up http client
        beginning of recursion
        input is list of tests, state is Passed & Failed counts

    Recurse through tests - test end
        two end cases
            both when test list is empty
            no fails, any fails=fail

    Recurse through tests - test middle
        recurse with either pass or fail incremented


Run it!

    start_server
    web_test
    start_server w/ debugging
        Add some debugging to bowling_web.erl, and you'll see...


Wrap-up

    Synergistic Weirdness
    Design patterns for recursion & message handling
    Escript for CLI
    Webapps with Spooky
        also other webapp frameworks


Bonus Materials

    presentation
    S9 slideshow source
    Full versions of scripts (with error handling)
    Unit tests


Crafty Erlang

    contact info

