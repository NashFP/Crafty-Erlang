code-engine: sh

author: Colin MacDonald
email: colin@bluegraybox.com
title: Crafty Erlang
{% css %}
.syntaxhighlighter {
    padding: 0.2em 0 0.2em 1em;
    margin: 0 0 0 0 !important;
    width: 100%;
}
.syntaxhighlighter table td.code .line {
    padding: 0 0 0 0 !important;
}
.code {
    background-color: #DDDDDD;
    padding: 1px;
}
.slide h1 {
    text-align: left;
    color: #FF6633;
}
.codeurl {
    color: grey;
    font-style: italic;
}
body {
    color: grey;
}
small {
    color: lightgrey;
}
.author {
    color: grey;
    font-style: italic;
    margin-top: 4em;
}
li.none {
    list-style-type: none;
}
{% end %}


h1. Crafty Erlang

h3. An elegant language for small projects

p(author). Colin MacDonald


h1. Where we're going
* Small but useful projects
* Thinking in Erlang
* Idioms/design patterns


h1. "Synergistic Weirdness"


h1. Weirdness - missing stuff
* Mutable variables
* Loop controls (for, while)
* Objects


h1. Weirdness - extra stuff
* Pattern matching (and guard expressions)
* Recursion
* Inter-Process Communication/Messaging (IPC)


h1. Synergistic Weirdness
* Pattern matching + immutability = clean & easy recursion
* Pattern matching -> clean & easy IPC message handling
* Recursion + IPC = safe mutable resources


h1. Synergistic Weirdness

Not rocket science, just different idioms


h1. Recursion is Cheap, Clean, & Easy
* Use it for _everything_
* All data are function params
* Replaces iteration
* Pattern matching functions replace conditionals
* Standard idioms


h1. Recursion
* beginning
* end
* middle


h1. Recursion

Simple case: list munging
* beginning

{% code lang=erlang line_numbers=false %}
func(Input) ->
    Output = [],
    func(Input, Output).
{% end %}


h1. Recursion

Simple case: list munging
* beginning

{% code lang=erlang line_numbers=false %}
func(Input) ->
    Output = [],
    func(Input, Output).
{% end %}

* end

{% code lang=erlang line_numbers=false %}
func([], Output) -> lists:reverse(Output).
{% end %}


h1. Recursion

Simple case: list munging
* beginning

{% code lang=erlang line_numbers=false %}
func(Input) ->
    Output = [],
    func(Input, Output).
{% end %}

* end

{% code lang=erlang line_numbers=false %}
func([], Output) -> lists:reverse(Output).
{% end %}

* middle

{% code lang=erlang line_numbers=false %}
func([First | Rest], Output) ->
    NewFirst = munge(First),
    func(Rest, [NewFirst | Output]);
{% end %}


h1. Digression: Backwards Lists
*(none) *Q:* What's up with that?
*(none) *A:* Both immutable and efficiently extensible
**(none) Hint: _singly_ linked lists


h1. Digression: Backwards Lists

{% code lang=erlang line_numbers=false %}
Foo = [cat, dog].
{% end %}

{% step %}
pre. Foo
|
cat - dog
{% end %}


h1. Digression: Backwards Lists

{% code lang=erlang line_numbers=false %}
Foo = [cat, dog].
Bar = [monkey|Foo].
{% end %}

{% step %}
pre. Bar      Foo
|        |
monkey - cat - dog
{% end %}



h1. Digression: Backwards Lists

{% code lang=erlang line_numbers=false %}
Foo = [cat, dog].
Bar = [monkey|Foo].
Baz = [elephant|Bar].
{% end %}

{% step %}
pre. Baz        Bar      Foo
|          |        |
elephant - monkey - cat - dog
{% end %}


h1. Back to recursion: Bowling Game
* Calculate score for a bowling game.
* Input is a list of rolls
* Output is a number - the final score
* Need to keep track of frame numbers - not fixed number of rolls
* Frame score may depend on other frames
** _OO metaphor shear_


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
% Need to put a space before comments, or Slideshow treat them as its own comments
 %% Beginning: score/1 -> score/3
score(Rolls) ->
    Frame = 1,
    Score = 0,
    score(Rolls, Frame, Score).
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
 %% Beginning
score(Rolls) ->
    score(Rolls, 1, 0).

 %% End
score(_Rolls, 11, Score) -> Score.
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
 %% Beginning
score(Rolls) ->
    score(Rolls, 1, 0).

 %% End
score(_Rolls, 11, Score) -> Score;

 %% Middle
score([Roll1, Roll2 | Rest], Frame, Score) ->
    NewScore = Score + Roll1 + Roll2,
    score(Rest, Frame + 1, NewScore).
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
 %% Beginning
score(Rolls) ->
    score(Rolls, 1, 0).

 %% End
score(_Rolls, 11, Score) -> Score;

 %% Strike
score([10 | Rest], Frame, Score) ->
    ...

 %% Spare
score([Roll1, Roll2 | Rest], Frame, Score) when Roll1 + Roll2 == 10 ->
    ...

 %% Normal
score([Roll1, Roll2 | Rest], Frame, Score) ->
    NewScore = Score + Roll1 + Roll2,
    score(Rest, Frame + 1, NewScore).
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
 %% Beginning
score(Rolls) ->
    score(Rolls, 1, 0).

 %% End
score(_Rolls, 11, Score) -> Score;

 %% Strike
score([10 | Rest], Frame, Score) ->
    [Bonus1, Bonus2 | _] = Rest,
    NewScore = Score + 10 + Bonus1 + Bonus2,
    score(Rest, Frame + 1, NewScore);

 %% Spare
score([Roll1, Roll2 | Rest], Frame, Score) when Roll1 + Roll2 == 10 ->
    [Bonus1 | _] = Rest,
    NewScore = Score + 10 + Bonus1,
    score(Rest, Frame + 1, NewScore);

 %% Normal
score([Roll1, Roll2 | Rest], Frame, Score) ->
    NewScore = Score + Roll1 + Roll2,
    score(Rest, Frame + 1, NewScore).
{% end %}


h1. Bowling Game

What about incomplete games?


h1. Bowling Game

What about incomplete games?

Several revisions later...


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
score(Rolls) -> score(Rolls, 1, 0).

score(_Rolls, 11, Score) -> Score;

score([10 | Rest], Frame, Score) ->
    score(Rest, Frame + 1, Score + 10 + strike_bonus(Rest));

score([Roll1, Roll2 | Rest], Frame, Score) when (Roll1 + Roll2 == 10) ->
    score(Rest, Frame + 1, Score + 10 + spare_bonus(Rest));

score([Roll1, Roll2 | Rest], Frame, Score) ->
    score(Rest, Frame + 1, Score + Roll1 + Roll2);

score([Roll1], _Frame, Score) -> Score + Roll1;
score([], _Frame, Score) -> Score.


spare_bonus([]) -> 0;
spare_bonus([Bonus1 | _Rest]) -> Bonus1.

strike_bonus([]) -> 0;
strike_bonus([Only]) -> Only;
strike_bonus([Bonus1, Bonus2 | _Rest]) -> Bonus1 + Bonus2.
{% end %}


h1. Ok, that's an algorithm

To make it useful, we need to add
* interface
* storage (mutable!)


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> 
{% end %}


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> colin 4
"colin 4\n"
{% end %}


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> colin 4
"colin 4\n"
2> [Player, RollText] = string:tokens(Line, " \t\n").
["colin","4"]
{% end %}


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> colin 4
"colin 4\n"
2> [Player, RollText] = string:tokens(Line, " \t\n").
["colin","4"]
3> {Roll, _} = string:to_integer(RollText).
{4,[]}
{% end %}


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> colin 4
"colin 4\n"
2> [Player, RollText] = string:tokens(Line, " \t\n").
["colin","4"]
3> {Roll, _} = string:to_integer(RollText).
{4,[]}
4> GameData = dict:new().
{dict,0,...
{% end %}


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> colin 4
"colin 4\n"
2> [Player, RollText] = string:tokens(Line, " \t\n").
["colin","4"]
3> {Roll, _} = string:to_integer(RollText).
{4,[]}
4> GameData = dict:new().
{dict,0,...
5> NewGameData = dict:append(Player, Roll, GameData).
{dict,1,...
{% end %}


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> colin 4
"colin 4\n"
2> [Player, RollText] = string:tokens(Line, " \t\n").
["colin","4"]
3> {Roll, _} = string:to_integer(RollText).
{4,[]}
4> GameData = dict:new().
{dict,0,...
5> NewGameData = dict:append(Player, Roll, GameData).
{dict,1,...
6> {ok, Rolls} = dict:find(Player, NewGameData).
{ok,[4]}
{% end %}


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> colin 4
"colin 4\n"
2> [Player, RollText] = string:tokens(Line, " \t\n").
["colin","4"]
3> {Roll, _} = string:to_integer(RollText).
{4,[]}
4> GameData = dict:new().
{dict,0,...
5> NewGameData = dict:append(Player, Roll, GameData).
{dict,1,...
6> {ok, Rolls} = dict:find(Player, NewGameData).
{ok,[4]}
7> Score = bowling_game:score(Rolls).
4
{% end %}


h1. Sketching the CLI

{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> Line = io:get_line("Next> ").
Next> colin 4
"colin 4\n"
2> [Player, RollText] = string:tokens(Line, " \t\n").
["colin","4"]
3> {Roll, _} = string:to_integer(RollText).
{4,[]}
4> GameData = dict:new().
{dict,0,...
5> NewGameData = dict:append(Player, Roll, GameData).
{dict,1,...
6> {ok, Rolls} = dict:find(Player, NewGameData).
{ok,[4]}
7> Score = bowling_game:score(Rolls).
4
{% end %}
Normally, you'd start iterating at this point...


h1. Recurse!
{% code lang=erlang line_numbers=false %}
loop(GameData) ->
    Line = io:get_line("Next> "),
    [Player, RollText] = string:tokens(Line, " \t\n"),
    {Roll, _} = string:to_integer(RollText),
    NewGameData = dict:append(Player, Roll, GameData),
    {ok, Rolls} = dict:find(Player, NewGameData).
    Score = bowling_game:score(Rolls).
    io:format("New score for ~s: ~p~n", [Player, Score]),
    loop(NewGameData).
{% end %}


h1. Escript kicks it off
{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

-import(bowling_game).

main([]) ->
    loop(dict:new()).

loop(GameData) ->
    ...
{% end %}


h1. Webify!
* Simple web app
* Single page sends Ajax REST requests, updates itself
* Uses the Spooky web framework & jQuery
* Spin off a process to manage the data (bowling_store)


h1. REST API

pre. http://localhost:8000/add/Player/Roll

e.g.

pre. http://localhost:8000/add/colin/4

<small>Yes, I'm modifying state with a GET. Shhh...</small>


h1. Spooky App
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).
{% end %}


h1. Spooky App
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).

init([])->
    register(store, bowling_store:init()),
    [{port, 8000}].
{% end %}


h1. Spooky App
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).

init([])->
    register(store, bowling_store:init()),
    [{port, 8000}].

get(_Req, ["add", Player, RollText])->
    ...
{% end %}


h1. Spooky App
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).

init([])->
    register(store, bowling_store:init()),
    [{port, 8000}].

get(_Req, ["add", Player, RollText])->
    Score = bowling_store:append(Player, RollText, store),
    {200, io_lib:format("~p", [Score])};
{% end %}


h1. Spooky App
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).

init([])->
    register(store, bowling_store:init()),
    [{port, 8000}].

get(_Req, ["add", Player, RollText])->
    Score = bowling_store:append(Player, RollText, store),
    {200, io_lib:format("~p", [Score])};

get(Req, [])-> get(Req, ["form.html"]);  % main page

get(_Req, Path)->  % other static resources
    Filename = filename:join(Path),
    case file:read_file(Filename) of
        {ok, PageBytes} -> {200, binary_to_list(PageBytes)};
        {error, Reason} -> {404, Reason}
    end.
{% end %}


h1. Bowling Store

Remember the command-line loop?
{% code lang=erlang line_numbers=false %}
loop(GameData) ->
    Line = io:get_line("Next> "),
    [Player, RollText] = string:tokens(Line, " \t\n"),

    {Roll, _} = string:to_integer(RollText),
    NewGameData = dict:append(Player, Roll, GameData),
    {ok, Rolls} = dict:find(Player, NewGameData).
    Score = bowling_game:score(Rolls).

    io:format("New score for ~s: ~p~n", [Player, Score]),
    loop(NewGameData).
{% end %}


h1. Bowling Store

Here's the request-handling loop.
{% code lang=erlang line_numbers=false %}
loop(GameData) ->
    receive {From, {append, Player, RollText}} ->

        {Roll, _} = string:to_integer(RollText),
        NewGameData = dict:append(Player, Roll, GameData),
        {ok, Rolls} = dict:find(Player, NewGameData),
        Score = bowling_game:score(Rolls),

        From ! Score,
        loop(NewGameData)
    end.
{% end %}


h1. Bowling Store

{% code lang=erlang line_numbers=false %}
loop(GameData) ->
    receive {From, {append, Player, RollText}} ->
        {Roll, _} = string:to_integer(RollText),
        NewGameData = dict:append(Player, Roll, GameData),
        {ok, Rolls} = dict:find(Player, NewGameData),
        Score = bowling_game:score(Rolls),
        From ! Score,
        loop(NewGameData)
    end.

init() ->
    Data = dict:new(),
    Start = fun() -> loop(Data) end,
    spawn(Start).
{% end %}


h1. Bowling Store

{% code lang=erlang line_numbers=false %}
loop(GameData) ->
    receive {From, {append, Player, RollText}} ->
        {Roll, _} = string:to_integer(RollText),
        NewGameData = dict:append(Player, Roll, GameData),
        {ok, Rolls} = dict:find(Player, NewGameData),
        Score = bowling_game:score(Rolls),
        From ! Score,
        loop(NewGameData)
    end.

init() ->
    Data = dict:new(),
    Start = fun() -> loop(Data) end,
    spawn(Start).

append(Player, RollText, Pid) ->
    Pid ! {self(), {append, Player, RollText}},
    receive Resp -> Resp end.
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
$ erl -pa $SPOOKY/ebin -pa $SPOOKY/deps/*/ebin
...
Eshell V5.8.4  (abort with ^G)
1> spooky:start_link(bowling_web).
{ok,<0.35.0>}
2> 
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
$ erl -pa $SPOOKY/ebin -pa $SPOOKY/deps/*/ebin
...
Eshell V5.8.4  (abort with ^G)
1> spooky:start_link(bowling_web).
{ok,<0.35.0>}
2> 
{% end %}
Of course, I got tired of typing all that.


h1. ...with Escript!
{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

main([]) ->
    SpookyDir = os:getenv("SPOOKY_DIR"),
    %% Add spooky and its dependencies to the code path.
    true = code:add_path(SpookyDir ++ "/ebin"),
    Deps = filelib:wildcard(SpookyDir ++ "/deps/*/ebin"),
    ok = code:add_paths(Deps),

    %% Compile our modules, just to be safe.
    c:c(bowling_game),
    c:c(bowling_store),
    c:c(bowling_web),

    spooky:start_link(bowling_web),
    io:format("Started spooky~n"),

    io:get_line("Return to exit...  "),
    spooky:stop().
{% end %}


h1. REST interaction

!slide_images/bowling_rest_1.png(add/colin/3)!


h1. REST interaction

!slide_images/bowling_rest_2.png(add/colin/4)!


h1. REST interaction

!slide_images/bowling_rest_3.png(add/colin/10)!


h1. REST interaction

!slide_images/bowling_rest_4.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_1.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_2.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_3.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_4.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_5.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_6.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_7.png(add/colin/3)!


h1. Extra credit: Automate REST tests

Hit a REST URL, check value returned
# http://localhost:8000/add/colin/3 -> 3
# http://localhost:8000/add/colin/4 -> 7
# http://localhost:8000/add/colin/10 -> 17
# http://localhost:8000/add/colin/3 -> 23


h1. Define test data
{% code lang=erlang line_numbers=false %}
 %% web_tests.data
 %% Tests defined as list of {Player, Roll, Score} tuples
[
{colin, 3,  3},
{colin, 4,  7},
{colin, 10, 17},
{colin, 3,  23}
].  % need the period at the end
{% end %}


h1. Load test data from file
{% code lang=erlang line_numbers=false %}
load_tests() ->
    {ok, Handle} = file:open("web_tests.data", [read]),
    {ok, Tests} = io:read(Handle, ""),
    file:close(Handle),
    Tests.
{% end %}


h1. Make REST call
{% code lang=erlang line_numbers=false %}
get_score(Player, Roll) ->
    Url = io_lib:format("http://localhost:8000/add/~p/~p", [Player, Roll]),
    {ok, {_Status, _Header, Content}} = httpc:request(Url),
    {Score, _} = string:to_integer(Content),
    Score.
{% end %}


h1. Recurse through tests
{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

 %% beginning
main(_) ->
    inets:start(),
    Tests = load_tests(),
    Passed = Failed = 0,
    test(Tests, Passed, Failed).
{% end %}


h1. Recurse through tests
{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

 %% beginning
main(_) ->
    inets:start(),
    Tests = load_tests(),
    Passed = Failed = 0,
    test(Tests, Passed, Failed).

 %% end
test([], Passed, 0) ->
    io:format("Passed! (~p tests)~n", [Passed]);

test([], Passed, Failed) ->
    io:format("Failed! Passed ~p, Failed ~p~n", [Passed, Failed]);
{% end %}


h1. Recurse through tests
{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

 %% beginning
main(_) ->
    inets:start(),
    Tests = load_tests(),
    Passed = Failed = 0,
    test(Tests, Passed, Failed).

 %% end
test([], Passed, 0) ->
    io:format("Passed! (~p tests)~n", [Passed]);

test([], Passed, Failed) ->
    io:format("Failed! Passed ~p, Failed ~p~n", [Passed, Failed]);

 %% middle
test([{Player, Roll, Expected} | Tests], Passed, Failed) ->
    case get_score(Player, Roll) of
        Expected ->
            io:format("."),
            test(Tests, Passed + 1, Failed);
        Actual ->
            io:format("Failed: expected=~p, actual=~p~n", [Expected, Actual]),
            test(Tests, Passed, Failed + 1)
    end.
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
$ ./start_server.erl 
Started spooky
Return to exit...  
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
$ ./start_server.erl 
Started spooky
Return to exit...  
{% end %}

{% code lang=bash line_numbers=false %}
$ ./web_test.erl 
....Passed! (4 tests)
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
$ ./start_server.erl 
Started spooky
Return to exit...  
{% end %}

{% code lang=bash line_numbers=false %}
$ ./web_test.erl 
....Passed! (4 tests)
{% end %}
_Add some debugging to bowling_web.erl, and you'll see..._
{% code lang=erlang line_numbers=false %}
$ ./start_server.erl 
Started spooky
Return to exit...  Add 3 for colin
Return to exit...  Add 4 for colin
Return to exit...  Add 10 for colin
Return to exit...  Add 3 for colin
Return to exit...  
{% end %}


h1. Wrap-up
* Synergistic Weirdness
* Idioms for recursion & message handling
* Escript for CLI
* Spooky Webapps
* Think small, have fun!


h1. Crafty Erlang

* https://bluegraybox.github.com/Crafty-Erlang - _presentation_
* https://github.com/bluegraybox/Crafty-Erlang - _S9 slideshow & actual code modules_

Colin MacDonald
* colin@bluegraybox.com
* bluegraybox.com/blog
* github.com/bluegraybox

