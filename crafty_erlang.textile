code-engine: sh

author: Colin MacDonald
email: colin@bluegraybox.com
title: Crafty Erlang
{% css %}
.syntaxhighlighter {
    padding: 0.2em 0 0.2em 1em;
    margin: 0 0 0 0 !important;
    width: 100%;
}
.syntaxhighlighter table td.code .line {
    padding: 0 0 0 0 !important;
}
.code {
    background-color: #DDDDDD;
    padding: 1px;
}
.slide h1 {
    text-align: left;
    color: #FF6633;
}
.codeurl {
    color: grey;
    font-style: italic;
}
body {
    color: grey;
}
small {
    color: lightgrey;
}
{% end %}


h1. Crafty Erlang

h3. An elegant language for small projects


h1. Where we're going
{% step %}
* Thinking in Erlang
*(step) Idioms/patterns
*(step) Small but useful projects
{% end %}


h1. "Synergistic Weirdness"


h1. Weirdness - missing stuff
{% step %}
* Mutable variables
*(step) Loop controls (for, while)
*(step) Objects
{% end %}


h1. Weirdness - extra stuff
% The Blub Paradox - Paul Graham - http://www.paulgraham.com/avg.html
{% step %}
* Pattern matching (and guard expressions)
*(step) Recursion
*(step) Inter-Process Communication/Messaging (IPC)
{% end %}


h1. Synergistic Weirdness
{% step %}
* Pattern matching + immutability = clean & easy recursion
*(step) Pattern matching -> clean & easy IPC message handling
*(step) Recursion + IPC = safe mutable resources
{% end %}


h1. Recursion is Cheap, Clean, & Easy
{% step %}
* Use it for _everything_
*(step) Replaces iteration
*(step) Pattern matching functions replace conditionals
*(step) Standard idioms
{% end %}


h1. Recursion
* beginning
* end
* middle


h1. Recursion

Simple case: list munging
* beginning

{% code lang=erlang line_numbers=false %}
func(Input) ->
    Output = [],
    func(Input, Output).
{% end %}


h1. Recursion

Simple case: list munging
* beginning

{% code lang=erlang line_numbers=false %}
func(Input) ->
    Output = [],
    func(Input, Output).
{% end %}

* end

{% code lang=erlang line_numbers=false %}
func([], Output) -> lists:reverse(Output).
{% end %}


h1. Recursion

Simple case: list munging
* beginning

{% code lang=erlang line_numbers=false %}
func(Input) ->
    Output = [],
    func(Input, Output).
{% end %}

* end

{% code lang=erlang line_numbers=false %}
func([], Output) -> lists:reverse(Output).
{% end %}

* middle

{% code lang=erlang line_numbers=false %}
func([First | Rest], Output) ->
    NewFirst = munge(First),
    func(Rest, [NewFirst | Output]);
{% end %}


h1. Digression: Backwards Lists
{% step %}
* *Q:* What's up with that?
*(step) *A:* Both immutable and efficiently extensible
**(step) Hint: _linked_ lists
{% end %}


h1. Digression: Backwards Lists

{% code lang=erlang line_numbers=false %}
Foo = [cat, dog].
{% end %}

{% step %}
pre. Foo
|
cat - dog
{% end %}


h1. Digression: Backwards Lists

{% code lang=erlang line_numbers=false %}
Bar = [monkey|Foo].
{% end %}

{% step %}
pre. Bar      Foo
|        |
monkey - cat - dog
{% end %}



h1. Digression: Backwards Lists

{% code lang=erlang line_numbers=false %}
Baz = [elephant|Bar].
{% end %}

{% step %}
pre. Baz        Bar      Foo
|          |        |
elephant - monkey - cat - dog
{% end %}


h1. Back to recursion: Bowling Game
{% step %}
* Calculate score for a bowling game.
*(step) Input is a list of rolls
*(step) Output is a number - the final score
*(step) Need to keep track of frame number
*(step) Frame score may depend on other frames
**(step) _OO metaphor shear_
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
% Need to put a space before comments, or Slideshow treat them as its own comments
 %% Beginning: score/1 -> score/3
score(Rolls) ->
    Frame = 1,
    Score = 0,
    score(Rolls, Frame, Score).
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
 %% Beginning
score(Rolls) ->
    score(Rolls, 1, 0).

 %% End
score(_Rolls, 11, Score) -> Score.
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
 %% Beginning
score(Rolls) ->
    score(Rolls, 1, 0).

 %% End
score(_Rolls, 11, Score) -> Score;

 %% Middle
score([First, Second | Rest], Frame, Score) ->
    NewScore = Score + First + Second,
    score(Rest, Frame + 1, NewScore).
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
 %% Beginning
score(Rolls) ->
    score(Rolls, 1, 0).

 %% End
score(_Rolls, 11, Score) -> Score;

 %% Strike
score([10 | Rest], Frame, Score) ->
    ...

 %% Spare
score([First, Second | Rest], Frame, Score) when First + Second == 10 ->
    ...

 %% Normal
score([First, Second | Rest], Frame, Score) ->
    NewScore = Score + First + Second,
    score(Rest, Frame + 1, NewScore).
{% end %}


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
 %% Beginning
score(Rolls) ->
    score(Rolls, 1, 0).

 %% End
score(_Rolls, 11, Score) -> Score;

 %% Strike
score([10 | Rest], Frame, Score) ->
    [Bonus1, Bonus2 | _] = Rest,
    NewScore = Score + 10 + Bonus1 + Bonus2,
    score(Rest, Frame + 1, NewScore);

 %% Spare
score([First, Second | Rest], Frame, Score) when First + Second == 10 ->
    [Bonus1 | _] = Rest,
    NewScore = Score + 10 + Bonus1,
    score(Rest, Frame + 1, NewScore);

 %% Normal
score([First, Second | Rest], Frame, Score) ->
    NewScore = Score + First + Second,
    score(Rest, Frame + 1, NewScore).
{% end %}


h1. Bowling Game

h3. What about incomplete games?


h1. Bowling Game

h3. Several revisions later...


h1. Bowling Game

{% code lang=erlang line_numbers=false %}
score(Rolls) -> score(Rolls, 1, 0).

score(_Rolls, 11, Score) -> Score;

score([10 | Rest], Frame, Score) ->
    score(Rest, Frame + 1, Score + 10 + strike_bonus(Rest));

score([First, Second | Rest], Frame, Score) when (First + Second == 10) ->
    score(Rest, Frame + 1, Score + 10 + spare_bonus(Rest));

score([First, Second | Rest], Frame, Score) ->
    score(Rest, Frame + 1, Score + First + Second);

score([First], _Frame, Score) -> Score + First;
score([], _Frame, Score) -> Score.


spare_bonus([]) -> 0;
spare_bonus([First | _Rest]) -> First.

strike_bonus([]) -> 0;
strike_bonus([Only]) -> Only;
strike_bonus([First, Second | _Rest]) -> First + Second.
{% end %}


h1. Processes & IPC


h1. Processes are Cheap, Clean, & Easy
{% step %}
* Use them for _everything_
*(step) Processes own data, not vice-versa
**(step) All data are function params.
*(step) Recursion + IPC = safe mutable resources
{% end %}


h1. Immutable data structures
{% code lang=erlang line_numbers=false %}
> D1 = dict:new().
{% end %}


h1. Immutable data structures
{% code lang=erlang line_numbers=false %}
> D1 = dict:new().
> D2 = dict:append(foo, bar, D1).
{% end %}


h1. Immutable data structures
{% code lang=erlang line_numbers=false %}
> D1 = dict:new().
> D2 = dict:append(foo, bar, D1).
> dict:find(foo, D2).            
{ok,[bar]}
{% end %}


h1. Immutable data structures
{% code lang=erlang line_numbers=false %}
> D1 = dict:new().
> D2 = dict:append(foo, bar, D1).
> dict:find(foo, D2).            
{ok,[bar]}
> D3 = dict:append(foo, baz, D2).
{% end %}


h1. Immutable data structures
{% code lang=erlang line_numbers=false %}
> D1 = dict:new().
> D2 = dict:append(foo, bar, D1).
> dict:find(foo, D2).            
{ok,[bar]}
> D3 = dict:append(foo, baz, D2).
> dict:find(foo, D3).            
{ok,[bar,baz]}
{% end %}


h1. Immutable data structures
{% code lang=erlang line_numbers=false %}
> D1 = dict:new().
> D2 = dict:append(foo, bar, D1).
> dict:find(foo, D2).            
{ok,[bar]}
> D3 = dict:append(foo, baz, D2).
> dict:find(foo, D3).            
{ok,[bar,baz]}
> dict:find(foo, D2).            
{ok,[bar]}
> dict:find(foo, D1).
error
{% end %}


h1. Mutable data structures?
{% code lang=erlang line_numbers=false %}
> S = kvstore:init().
{% end %}


h1. Mutable data structures?
{% code lang=erlang line_numbers=false %}
> S = kvstore:init().
> kvstore:append(foo, bar, S). 
{% end %}


h1. Mutable data structures?
{% code lang=erlang line_numbers=false %}
> S = kvstore:init().
> kvstore:append(foo, bar, S). 
> kvstore:find(foo, S).    
[bar]
{% end %}


h1. Mutable data structures?
{% code lang=erlang line_numbers=false %}
> S = kvstore:init().
> kvstore:append(foo, bar, S). 
> kvstore:find(foo, S).    
[bar]
> kvstore:append(foo, baz, S).
{% end %}


h1. Mutable data structures?
{% code lang=erlang line_numbers=false %}
> S = kvstore:init().
> kvstore:append(foo, bar, S). 
> kvstore:find(foo, S).    
[bar]
> kvstore:append(foo, baz, S).
> kvstore:find(foo, S).    
[bar,baz]
{% end %}


h1. How do we do that?
{% step %}
_Again, there's a pattern..._
*(step) Spin off a process to manage the data
*(step) Send messages to interact with that process
*(step) Wrap that in a client API
*(step) Write the event handler
{% end %}


h1. Spin off data manager process
{% code lang=erlang line_numbers=false %}
init() ->
    Data = dict:new(),
    Start = fun() -> loop(Data) end,
    spawn(Start).
{% end %}
Returns a PID so you can send messages to loop/1.


h1. Spin off data manager process
{% code lang=erlang line_numbers=false %}
init() ->
    Data = dict:new(),
    Start = fun() -> loop(Data) end,
    spawn(Start).
{% end %}
Returns a PID so you can send messages to loop/1.
{% code lang=erlang line_numbers=false %}
1> S = kvstore:init().
<0.34.0>
{% end %}


h1. Provide a client API

_Send messages to the loop/1 process_
{% code lang=erlang line_numbers=false %}
find(Key, StorePid) ->
    MyPid = self(),
    Req = {find, Key},
    StorePid ! {MyPid, Req},
    receive Resp -> Resp end.
{% end %}
Returns whatever loop/1 responds with.


h1. Provide a client API

_Send messages to the loop/1 process_
{% code lang=erlang line_numbers=false %}
find(Key, StorePid) ->
    MyPid = self(),
    Req = {find, Key},
    StorePid ! {MyPid, Req},
    receive Resp -> Resp end.
{% end %}
Returns whatever loop/1 responds with.
{% code lang=erlang line_numbers=false %}
2> kvstore:find(foo, S).
[]
{% end %}


h1. Provide a client API

_Send messages to the loop/1 process_
{% code lang=erlang line_numbers=false %}
find(Key, StorePid) ->
    MyPid = self(),
    Req = {find, Key},
    StorePid ! {MyPid, Req},
    receive Resp -> Resp end.

append(Key, Value, StorePid) ->
    MyPid = self(),
    Req = {append, Key, Value},
    StorePid ! {MyPid, Req},
    receive Resp -> Resp end.
{% end %}


h1. Provide a client API

_Send messages to the loop/1 process_
{% code lang=erlang line_numbers=false %}
find(Key, StorePid) ->
    MyPid = self(),
    Req = {find, Key},
    StorePid ! {MyPid, Req},
    receive Resp -> Resp end.

append(Key, Value, StorePid) ->
    MyPid = self(),
    Req = {append, Key, Value},
    StorePid ! {MyPid, Req},
    receive Resp -> Resp end.
{% end %}

{% code lang=erlang line_numbers=false %}
3> kvstore:append(foo, bar, S).
ok
4> kvstore:find(foo, S).
[bar]
{% end %}


h1. Write the event handler
{% code lang=erlang line_numbers=false %}
loop(Dict) ->
    receive {From, Req} ->
        case Req of
            {find, Key} ->
                % handle find
            {append, Key, Value} ->
                % handle append
        end
    end.
{% end %}


h1. Write the event handler
{% code lang=erlang line_numbers=false %}
loop(Dict) ->
    receive {From, Req} ->
        case Req of
            {find, Key} ->
                % Get key value from Dict
                % Respond with value
                % Recurse!
            {append, Key, Value} ->
                % Add new value to key in Dict
                % Respond with ok
                % Recurse with new Dict
        end
    end.
{% end %}


h1. Write the event handler
{% code lang=erlang line_numbers=false %}
loop(Dict) ->
    receive {From, Req} ->
        case Req of
            {find, Key} ->
                Value = find_value(Key, Dict),
                From ! Value,
                loop(Dict);
            {append, Key, Value} ->
                NewDict = dict:append(Key, Value, Dict),
                From ! ok,
                loop(NewDict)  % updated dictionary!
        end
    end.
{% end %}


h1. Write the event handler
{% code lang=erlang line_numbers=false %}
loop(Dict) ->
    receive {From, Req} ->
        case Req of
            {find, Key} ->
                Value = find_value(Key, Dict),
                From ! Value,
                loop(Dict);
            {append, Key, Value} ->
                NewDict = dict:append(Key, Value, Dict),
                From ! ok,
                loop(NewDict)  % updated dictionary!
        end
    end.

find_value(Key, Dict) ->
    case dict:find(Key, Dict) of
        {ok, Value} -> Value;
        error -> []
    end.
{% end %}


h1. Road test it!
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> S = kvstore:init().
<0.34.0>
{% end %}


h1. Road test it!
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> S = kvstore:init().
<0.34.0>
2> kvstore:find(foo, S).
[]
{% end %}


h1. Road test it!
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> S = kvstore:init().
<0.34.0>
2> kvstore:find(foo, S).
[]
3> kvstore:append(foo, bar, S).
ok
{% end %}


h1. Road test it!
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> S = kvstore:init().
<0.34.0>
2> kvstore:find(foo, S).
[]
3> kvstore:append(foo, bar, S).
ok
4> kvstore:append(foo, baz, S).
ok
{% end %}


h1. Road test it!
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> S = kvstore:init().
<0.34.0>
2> kvstore:find(foo, S).
[]
3> kvstore:append(foo, bar, S).
ok
4> kvstore:append(foo, baz, S).
ok
5> kvstore:find(foo, S).       
[bar,baz]
{% end %}


h1. Is that some crazy over-designing or what?


h1. Is that some crazy over-designing or what?

Know what a file handle looks like?


h1. Is that some crazy over-designing or what?

Know what a file handle looks like?
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> file:open("foo.txt", [write]).
{ok,<0.36.0>}
{% end %}


h1. Is that some crazy over-designing or what?

Know what a file handle looks like?
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> file:open("foo.txt", [write]).
{ok,<0.36.0>}
{% end %}
This is just how Erlang does things.


h1. Is that some crazy over-designing or what?

Know what a file handle looks like?
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> file:open("foo.txt", [write]).
{ok,<0.36.0>}
{% end %}
This is just how Erlang does things.

_p.s. The version of the key-value store in_ Erlang and OTP In Action _uses a separate process for each key!_


h1. Mash-up!
* Simple web app
* Modify the key-value store to keep score in a bowling game
* Single page sends Ajax REST requests, updates itself
* Uses the Spooky web framework & jQuery

h1. Modify 'append' handler to return score
{% code lang=erlang line_numbers=false %}
            {append, Key, Value} ->
                NewDict = dict:append(Key, Value, Dict),
                From ! ok,
                loop(NewDict)  % updated dictionary
{% end %}
_becomes..._
{% code lang=erlang line_numbers=false %}
            {append, Key, Value} ->
                NewDict = dict:append(Key, Value, Dict),

                Rolls = find_value(Key, NewDict),
                Score = bowling_game:score(Rolls),
                From ! Score,

                loop(NewDict)  % updated dictionary
{% end %}
'find' handler not used.


h1. Test drive
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
> S = bowling_store:init().
<0.34.0>
{% end %}


h1. Test drive
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
> S = bowling_store:init().
<0.34.0>
> bowling_store:append(colin, 3, S).
3
{% end %}


h1. Test drive
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
> S = bowling_store:init().
<0.34.0>
> bowling_store:append(colin, 3, S).
3
> bowling_store:append(colin, 4, S).
7
{% end %}


h1. Test drive
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
> S = bowling_store:init().
<0.34.0>
> bowling_store:append(colin, 3, S).
3
> bowling_store:append(colin, 4, S).
7
> bowling_store:append(colin, 10, S).
17
{% end %}


h1. Test drive
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
> S = bowling_store:init().
<0.34.0>
> bowling_store:append(colin, 3, S).
3
> bowling_store:append(colin, 4, S).
7
> bowling_store:append(colin, 10, S).
17
> bowling_store:append(colin, 4, S). 
25
{% end %}


h1. REST API

pre. http://localhost:8000/add/Player/Roll

e.g.

pre. http://localhost:8000/add/colin/4

<small>Yes, I'm modifying state with a GET. Shhh...</small>


h1. Web app
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).
{% end %}


h1. Web app
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).

init([])->
    register(store, bowling_store:init()),
    [{port, 8000}].
{% end %}


h1. Web app
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).

init([])->
    register(store, bowling_store:init()),
    [{port, 8000}].

get(_Req, ["add", Player, RollText])->
    ...
{% end %}


h1. Web app
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).

init([])->
    register(store, bowling_store:init()),
    [{port, 8000}].

get(_Req, ["add", Player, RollText])->
    {Roll, _} = string:to_integer(RollText),
    Score = bowling_store:append(Player, Roll, store),
    {200, io_lib:format("~p", [Score])};
{% end %}


h1. Web app
{% code lang=erlang line_numbers=false %}
-module(bowling_web).
-behaviour(spooky).
-export([init/1, get/2]).  % Spooky API
-import(bowling_store).

init([])->
    register(store, bowling_store:init()),
    [{port, 8000}].

get(_Req, ["add", Player, RollText])->
    {Roll, _} = string:to_integer(RollText),
    Score = bowling_store:append(Player, Roll, store),
    {200, io_lib:format("~p", [Score])};

get(Req, [])-> get(Req, ["form.html"]);  % main page

get(_Req, Path)->  % other static resources
    Filename = filename:join(Path),
    case file:read_file(Filename) of
        {ok, PageBytes} -> {200, binary_to_list(PageBytes)};
        {error, Reason} -> {404, Reason}
    end.
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
$ erl -pa $SPOOKY/ebin -pa $SPOOKY/deps/*/ebin
Erlang R14B03 (erts-5.8.4) [source] [64-bit] [smp:4:4] [rq:4] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.8.4  (abort with ^G)
1> spooky:start_link(bowling_web).
{ok,<0.35.0>}
2> 
{% end %}


h1. REST interaction

!slide_images/bowling_rest_1.png(add/colin/3)!


h1. REST interaction

!slide_images/bowling_rest_2.png(add/colin/4)!


h1. REST interaction

!slide_images/bowling_rest_3.png(add/colin/10)!


h1. REST interaction

!slide_images/bowling_rest_4.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_1.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_2.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_3.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_4.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_5.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_6.png(add/colin/3)!


h1. Webapp interaction

!slide_images/bowling_app_7.png(add/colin/3)!


h1. Extra credit: Web tests

Hit a REST URL, check value returned
{% step %}
* http://localhost:8000/add/colin/3 -> 3
*(step) http://localhost:8000/add/colin/4 -> 7
*(step) http://localhost:8000/add/colin/10 -> 17
*(step) http://localhost:8000/add/colin/3 -> 23
{% end %}


h1. Define test data
{% code lang=erlang line_numbers=false %}
 %% web_tests.data
 %% Tests defined as list of {Player, Roll, Score} tuples
[
{colin, 3,  3},
{colin, 4,  7},
{colin, 10, 17},
{colin, 3,  23}
].  % need the period at the end
{% end %}


h1. Load test data from file
{% code lang=erlang line_numbers=false %}
load_tests() ->
    {ok, Handle} = file:open("web_tests.data", [read]),
    {ok, Tests} = io:read(Handle, ""),
    file:close(Handle),
    Tests.
{% end %}


h1. Make REST call
{% code lang=erlang line_numbers=false %}
get_score(Player, Roll) ->
    Url = io_lib:format("http://localhost:8000/add/~p/~p", [Player, Roll]),
    {ok, {_Status, _Header, Content}} = httpc:request(Url),
    {Score, _} = string:to_integer(Content),
    Score.
{% end %}


h1. Recurse through tests
{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

 %% beginning
main(_) ->
    inets:start(),
    Tests = load_tests(),
    Passed = Failed = 0,
    test(Tests, Passed, Failed).
{% end %}


h1. Recurse through tests
{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

 %% beginning
main(_) ->
    inets:start(),
    Tests = load_tests(),
    Passed = Failed = 0,
    test(Tests, Passed, Failed).

 %% end
test([], Passed, 0) ->
    io:format("Passed! (~p tests)~n", [Passed]);

test([], Passed, Failed) ->
    io:format("Failed! Passed ~p, Failed ~p~n", [Passed, Failed]);
{% end %}


h1. Recurse through tests
{% code lang=erlang line_numbers=false %}
#!/usr/local/bin/escript

 %% beginning
main(_) ->
    inets:start(),
    Tests = load_tests(),
    Passed = Failed = 0,
    test(Tests, Passed, Failed).

 %% end
test([], Passed, 0) ->
    io:format("Passed! (~p tests)~n", [Passed]);

test([], Passed, Failed) ->
    io:format("Failed! Passed ~p, Failed ~p~n", [Passed, Failed]);

 %% middle
test([{Player, Roll, Expected} | Tests], Passed, Failed) ->
    case get_score(Player, Roll) of
        Expected ->
            io:format("."),
            test(Tests, Passed + 1, Failed);
        Actual ->
            io:format("Failed: expected=~p, actual=~p~n", [Expected, Actual]),
            test(Tests, Passed, Failed + 1)
    end.
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> spooky:start_link(bowling_web).
{ok,<0.35.0>}
2>
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> spooky:start_link(bowling_web).
{ok,<0.35.0>}
2>
{% end %}

{% code lang=bash line_numbers=false %}
$ ./web_test.erl 
....Passed! (4 tests)
{% end %}


h1. Run it!
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> spooky:start_link(bowling_web).
{ok,<0.35.0>}
2>
{% end %}

{% code lang=bash line_numbers=false %}
$ ./web_test.erl 
....Passed! (4 tests)
{% end %}
_Add some debugging to bowling_web.erl, and you'll see..._
{% code lang=erlang line_numbers=false %}
Eshell V5.8.4  (abort with ^G)
1> spooky:start_link(bowling_web).
{ok,<0.35.0>}
Add 3 for colin
Add 4 for colin
Add 10 for colin
Add 3 for colin
2> 
{% end %}


h1. Wrap-up
{% step %}
* Synergistic Weirdness
*(step) Patterns of use
*(step) Think small
{% end %}


h1. Crafty Erlang

Colin MacDonald
* colin@bluegraybox.com
* http://www.bluegraybox.com/blog/
* https://github.com/bluegraybox
* https://github.com/bluegraybox/Crafty-Erlang
** _S9 slideshow & actual code modules_

